// L'objectif est de naviguer sur les différents block pour aller explorer la tables des inodes de la partition ext2

#include<stdio.h>
#include<time.h>
#include<inttypes.h>
#include<stdint.h>
#include"inode.h"
#include"superblock.h"
#include"blockgroup.h"

int main( int argc, char *argv[])

{

        // ## PRISE DU FICHIER EN PARAMETRE ET VERIF ##

        FILE * fichier;
        fichier = fopen(argv[1],"r");
        if (fichier == NULL)
        {
                printf("Fichier invalide, sale gueux ! Du coup tu as une magnifique \n");
        }

        // ## DECLARATION DES STRUCTURES ##

        struct superblock su;
        struct Block_Group_Descriptor bgd;
        struct inode ind;



        // ## DECLARATION DES VARIABLES ##

        int offset , offset2 , nb_block, size_block, i;

        fseek(fichier, 1024, SEEK_SET); // Curseur au début du superblock
        fread(&su, sizeof(struct superblock),1,fichier); // On peuple la structure su avec le contenu du superblock
        
        // Calcul de la taille d'un bloc du fichier image

        nb_block=(su.s_first_data_block)+1;     // Nombre de blocs précedents
        size_block=1024 << su.s_log_block_size;         // Taille du bloc
        offset = nb_block * size_block;         // Déplacement au déscripteur

        fseek(fichier, offset, SEEK_SET);
        fread(&bgd,sizeof(struct Block_Group_Descriptor),1,fichier);
        printf("Je sais pas ce que j'affiche mais ça donne : %d \n", bgd.bg_inode_table);
        offset2=(bgd.bg_inode_table)* size_block + sizeof(struct inode);

        fseek(fichier,offset2, SEEK_SET);
        fread(&ind, sizeof(struct inode),1,fichier);


        // Lecture du déscripteur de bloc débutant au second bloc
        // Le second bloc possède l'offset blocksize*2

        printf("Les types et droits sont : %x\n", ind.i_mode);
        printf("La taille en bytes est de %d\n", ind.i_size);
        printf("Le dernier accès s'est fait le %d\n", ind.i_atime);
        printf("Créé le : %d\n", ind.i_ctime);
        printf("Modifié le : %d\n", ind.i_mtime);
        fseek(fichier, offset, SEEK_SET);
        fread(&bgd,sizeof(struct Block_Group_Descriptor),1,fichier);
        printf("Je sais pas ce que j'affiche mais ça donne : %d \n", bgd.bg_inode_table);
        offset2=(bgd.bg_inode_table)* size_block + sizeof(struct inode);

        fseek(fichier,offset2, SEEK_SET);
        fread(&ind, sizeof(struct inode),1,fichier);


        // Lecture du déscripteur de bloc débutant au second bloc
        // Le second bloc possède l'offset blocksize*2

        printf("Les types et droits sont : %x\n", ind.i_mode);
        printf("La taille en bytes est de %d\n", ind.i_size);
        printf("Le dernier accès s'est fait le %d\n", ind.i_atime);
        printf("Créé le : %d\n", ind.i_ctime);
        printf("Modifié le : %d\n", ind.i_mtime);

        printf("Il faudrait convertir ces timestamp ci dessus en date lisible par un péon lambda que diable \n");
        printf("ifile truc %d\n",ind.i_file_acl); //test des données présentes dans la structure
        printf("ifile truc %d\n",ind.i_dir_acl); // idem
        if (ind.i_dtime == 0)

        {

        printf("\n L'inode n'a jamais été supprimée, gros jambon que tu es ! \n");

        }
}



